<?php
/**
 * author: jimliu
 * Date: 2017/7/21
 * 基础函数库,在任何地方均可调用
 */

/**
 * 获取GET或者POST请求参数,没有或参数错误返回空;
 */
function getParam($param){
    if($_SERVER['REQUEST_METHOD'] == 'GET'){
        return $_GET[$param];
    }else if($_SERVER['REQUEST_METHOD'] == 'POST'){
        return $_POST[$param];
    }else{
        return null;
    }
}

/**
 * 邮箱验证 , 返回回0(false)或1(true)
 **/
function check_email($email){
    $pattern = "/^[a-zA-Z0-9]+@([a-zA-Z0-9]+.)([a-z]{3,4})$/i";
    return preg_match($pattern,$email);
}

/**
 * @param array $data 返回的数据
 * @param int $status 默认255,表示成功,4表示失败
 */
function echoInfo($data = array()){
    if(!is_array($data) || $data == null){
        $return = array('data' => $data , 'status' => 4 , 'message' => 'error');
    }else{
        $return = array('data' => $data , 'status' => 255 , 'message' => 'error');
    }
    echo json_encode($return); exit;
}

/**
 * @$url 参数数组 例如: 路径为: 传入这个的值 : $_SERVER['REQUEST_URI']
 */
function router($url){
    $params = array();              //路由和参数值
    $errorMessage = 'url error ,  Correct format : "http://domain/index.php/home or admin/controller/method/param/value/param/value...."';
    if(strpos($url, 'index.php')){
        $temp = explode('index.php' , trim($url , '/'));
        if(empty($temp[1])){
            $params['model'] = 'home';
            $params['class'] = 'Index';
            $params['method'] = 'index';
        }else{
            $array = explode("/" , trim($temp[1] , '/'));
            if(sizeof($array) == 1){
                $params['model'] = $array[0];
                $params['class'] = 'Index';
                $params['method'] = 'index';
            }elseif(sizeof($array) == 2){
                $params['model'] = $array[0];
                $params['class'] = $array[1];
                $params['method'] = 'index';
            }
            elseif(sizeof($array) >= 3 ){
                $controller = array_splice($array , 0 , 3);     // 路由: 即数组前三个值 , 剩下的则是参数值;
                $params['model'] = $controller[0];
                $params['class'] = $controller[1];
                $params['method'] = $controller[2];
                $count = sizeof($array);
                if($count >= 2){                             //$array为剔除了前三个值的数组,剩下的全是参数,$array要有至少两个值才有参数可言
                    if($count % 2 == 1){
                        array_pop($array);      //如果$array为单数,就删除最后一个值;
                    }
                    for($i = 0 ; $i < $count - 1 ; $i++){
                        $params[$array[$i]] = $array[$i+1];
                        $i++;
                    }
                }
            }
        }
        return $params;
    }else{
        error_handler($errorMessage);
    }
}

/**
 * @param string $message 错误提示信息
 * @throws Exception
 */
function error_handler($message = ''){
    if(is_string($message)){
        echo 'current error : ' . $message;exit;
    }
}

/**
 * @param $dir 目录
 * 功能: 加载指定目录下的类
 */
function load_class($dir){
    if(file_exists($dir)){
        $temp = dir($dir);
        while($filename = $temp->read()){
            if($filename != '.' && $filename != '..'){
                require $dir . DS . $filename;
            }
        }
        $temp->close();
    }else{
        error_handler('dir not exists : ' . $dir);
    }
}

/*******************************************
 *
 * -------以下方法是自己收集的方法---------------
 *
 *******************************************/

/**
 * 安全过滤函数,过滤sql注入漏洞
 * @param $string
 * @return string
 */
function safe_replace($string) {
    $string = str_replace('%20','',$string);
    $string = str_replace('%27','',$string);
    $string = str_replace('%2527','',$string);
    $string = str_replace('*','',$string);
    $string = str_replace('"','&quot;',$string);
    $string = str_replace("'",'',$string);
    $string = str_replace('"','',$string);
    $string = str_replace(';','',$string);
    $string = str_replace('<','&lt;',$string);
    $string = str_replace('>','&gt;',$string);
    $string = str_replace("{",'',$string);
    $string = str_replace('}','',$string);
    $string = str_replace('\\','',$string);
    return $string;
}

/**
 * xss过滤函数
 * @param $string
 * @return string
 */
function remove_xss($string) {
    $string = preg_replace('/[\x00-\x08\x0B\x0C\x0E-\x1F\x7F]+/S', '', $string);
    $parm1 = Array('javascript', 'vbscript', 'expression', 'applet', 'meta', 'xml', 'blink', 'link', 'script', 'embed', 'object', 'iframe', 'frame', 'frameset', 'ilayer', 'layer', 'bgsound', 'title', 'base');
    $parm2 = Array('onabort', 'onactivate', 'onafterprint', 'onafterupdate', 'onbeforeactivate', 'onbeforecopy', 'onbeforecut', 'onbeforedeactivate', 'onbeforeeditfocus', 'onbeforepaste', 'onbeforeprint', 'onbeforeunload', 'onbeforeupdate', 'onblur', 'onbounce', 'oncellchange', 'onchange', 'onclick', 'oncontextmenu', 'oncontrolselect', 'oncopy', 'oncut', 'ondataavailable', 'ondatasetchanged', 'ondatasetcomplete', 'ondblclick', 'ondeactivate', 'ondrag', 'ondragend', 'ondragenter', 'ondragleave', 'ondragover', 'ondragstart', 'ondrop', 'onerror', 'onerrorupdate', 'onfilterchange', 'onfinish', 'onfocus', 'onfocusin', 'onfocusout', 'onhelp', 'onkeydown', 'onkeypress', 'onkeyup', 'onlayoutcomplete', 'onload', 'onlosecapture', 'onmousedown', 'onmouseenter', 'onmouseleave', 'onmousemove', 'onmouseout', 'onmouseover', 'onmouseup', 'onmousewheel', 'onmove', 'onmoveend', 'onmovestart', 'onpaste', 'onpropertychange', 'onreadystatechange', 'onreset', 'onresize', 'onresizeend', 'onresizestart', 'onrowenter', 'onrowexit', 'onrowsdelete', 'onrowsinserted', 'onscroll', 'onselect', 'onselectionchange', 'onselectstart', 'onstart', 'onstop', 'onsubmit', 'onunload');
    $parm = array_merge($parm1, $parm2);
    for ($i = 0; $i < sizeof($parm); $i++) {
        $pattern = '/';
        for ($j = 0; $j < strlen($parm[$i]); $j++) {
            if ($j > 0) {
                $pattern .= '(';
                $pattern .= '(&#[x|X]0([9][a][b]);?)?';
                $pattern .= '|(&#0([9][10][13]);?)?';
                $pattern .= ')?';
            }
            $pattern .= $parm[$i][$j];
        }
        $pattern .= '/i';
        $string = preg_replace($pattern, ' ', $string);
    }
    return $string;
}


